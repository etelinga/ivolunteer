<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<!--
  - Application context definition.
  -->
<beans>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <value>
                hibernate.hbm2ddl.auto=${hibernate.auto}
                hibernate.dialect=${hibernate.dialect}
                hibernate.show_sql=${hibernate.showsql}
                hibernate.query.substitutions=true 'T', false 'F'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.use_query_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
        <property name="annotatedClasses">
            <list>
                <value>org.actionfeed.domain.model.Volunteer</value>
                <value>org.actionfeed.domain.model.Event</value>
            </list>
        </property>
        <property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
                </entry>
            </map>
        </property>
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
    <!--
     <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
     -->


    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

    <!--
      - Central data access object: Hibernate implementation.
    -->
    <bean id="genericDao" class="org.actionfeed.domain.dao.HibernateDao" init-method="init">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="baseService" class="org.actionfeed.service.ApplicationService">
        <property name="dao" ref="genericDao"/>
        <property name="cacheService" ref="cacheManager"/>
    </bean>

    <!--
        - Transactional proxy for the central data access object.
        -
        - Defines specific transaction attributes with "readOnly" markers,
        - which is an optimization that is particularly valuable with Hibernate
        - (to suppress unnecessary flush attempts for read-only operations).
    -->
    <bean id="service" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="target" ref="baseService"/>
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="save*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

</beans>
